* mvc
* dto
* responseentity
* bean authenticator
* specifications
* mapstruct
* spring security
*

- Criar a aplicação no spring initializr
com as dependencias: postgres driver, spring web, spring dev tools, spring data jpa, lombok, spring security
- Abrir o terminal na pasta da aplicação e enviar o comando: mvn clean install -DskipTests
esse comando faz o build do projeto sem o test 
- Criar network: docker network create library-network
- Criar um volume docker: docker volume create library-network
- Criar o container do postgres apontando para network: docker run --name librarydb -p 5432:5432 -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=library --network library-network --volume library-network postgres:latest
- Criar o container apontando para network: docker run --name pgadmin4 -p 15432:80 -e PGADMIN_DEFAULT_EMAIL=admin@admin.com -e PGADMIN_DEFAULT_PASSWORD=admin --network library-network dpage/pgadmin4:latest
- Abrir a pagina do pgadmin: localhost:15432/browser
- Criar um novo banco de dados
	Name: librarydb
	Host name: localhost
	port: 5432 (mesma porta do comando para criar o container do postgres)
	maintenance database: library
	username: postgres
	password: postgres
- Configurar conexao com banco de dados no application.properties
- Criar pasta Model, e a classe Autor.java com:
@Entity @Data @EntityListeners(AuditingEntityListener.class) 
Com o @NotBlank ou @NotNull também
Na data de nascimento, adicionar o @Future para não aceitar data futura
UUID id, nome, data nascimento, nacionalidade, @CreatedDate data cadastro, @LastModifiedDate data atualizaçao, UUID id_usuario

- Criar a entidade Livro com:
@Entity @Data @EntityListeners(AuditingEntityListener.class) 
Com o @NotBlank ou @NotNull também
Com @ISBN também
Na data de publicacao adicionar o @Past para não aceitar data passada
UUID id, isbn, titulo, data publicacao, genero, preco, id_autor, UUID id_usuario

- Ir a classe application (main) e adicionar a annotation:
@EnableJpaAuditing
- Criar enum GeneroLivro (FICCAO, FANTASIA, MISTERIOS, ROMANCE, BIOGRAFIA, CIENCIA, TERROR)
- Criar repository para cada entidade
- Criar services
- Criar metodos para listar e mostrar o livro e o autor juntos
- Metodos para barra de pesquisa: 
ex: List<Livro> findByFirstNameContaining(String titulo);
ou com o @Query('Codigo sql')
- Criar o controller para cada entidade
: AutorController
	@RequestMapping("/autores")
: LivrosController
	@RequestMapping("/livros")
- No package controller, criar uma pasta chamada dto e um Record: AutorDTO
public record AutorDTO (String nome, LocalDate dataNascimento, String nacionalidade) {}
- Criar métodos CRUD no controller com return tipo ResponseEntity e com parametros do tipo AutorDTO
- No AutorDTO, criar um metodo para mapearAutor, que vai instanciar um autor e atribuir os dados 
recebidos no AutorDTO para o autor e depois no service, fazer o repository salvar esse objeto que retorna do DTO
- Ao cadastrar, gerar o link de visualizaçao para cada novo registro:
URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(autorEntidade.getId()).toUri();
return ResponseEntity.created(location).build();
- No autorcontroller, criar um metodo que recebe nome e/ou nacionalidade para pesquisar
- No AutorService, criar um metodo para pesquisa obtendo nome e nacionalidade, para isso será necessario criar metodos no repository
- Criar o DTO padronizado para erros: Na pasta dto, criar um record chamado ErroCampo com string campo e erro
- Criar outro record chamado ErroResposta com int status, string mensagem, List<ErroCampo> erros
- Criar alguns metodos dentro do ErroResposta:
respostaPadrao, conflito e outras se quiser
- Adicionar a classe ErroResposta como parametro de saida dos controllers
- Criar a pasta Exception e a classe RegistroDuplicadoException e que herde e RunTimeException
- Criar um construtor para utilizar um super da runtime com uma mensage
- Criar uma pasta Validator com um classe AutorValidator, adicionar @Component e injetar dependencia do AutorRepository
- Criar lógicas de validação
- Criar uma exception handler para os erros
- No autorDTO adicionar @NotBlank(message = "O campo nome é obrigatório") para o atributo nome, @NotNull para o dataNascimento, @NotBlank para o nacionalidade
- No autorController, no parametro do metodo, adicionar @Valid depois do @RequestBody e antes dos parametros
- No autorservice, criar metodo que nao permite excluir um autor que possui livro cadastrado
- Criar exceçao OperacaoNaoPermitidaException
- Criar metodo no repository para buscar livro pelo autor (findByAutor recebendo Autor autor)
- Adicionar @RequiredArgsConstructor em todas classes e remover o @Autowired
- Adicionar dependencia do starter-validation no pom
- mvn clean install -DskipTests
- No autorDTO adicionar @NotBlank ou @NotNull e o @Size nos parametros
- Criar pasta common dentro de Controller, e criar classe GlobalExceptionHandler para tratar os erros do bean validation
- Criar handler do bean validation
- Criar pesquisa de autores com Example
- Criar API dos livros
- Criar DTO para CadastrarLivroDTO e outro DTO para ResultadoPesquisaLivroDTO
- Adicionar a propriedade do Mapstruct no pom (junto a versao do java)
- Adicionar o MapStruct para criar automaticamente os DTOs no pom
- Adicionar a dependencia do mapstruct no pom
- Adicionar o plugin do MapStruct
- Criar pasta dentro de Controllers chamada Mappers e criar interface AutorMapper
- Adicionar annotations: @Mapper(componentModel = "spring")
- Criar os metodos de conversao entidade e dto
- No AutorService e AutorController, fazer as conversões de classe
- Criar o LivroMapper
- Fazer as conversões também no controller de LivrosController
- Alterar os campos dos controllers com o mapeamento dto do mapstruct
- Criar metodos de resposta padrao para erros no controller/commoon/GlobalExceptionHandler
- Adicionar resposta aos metodos de erros no controller e service
- Criar as specifications do spring data jpa, adicionando JpaSpecificationExecutor no repository
- Criar uma pasta: specs com uma classe: LivroSpecs que vai fazer as pesquisas no banco com os dados solicitados
- Criar classe de validaçao para livros e seus metodos (como isbn duplicado)
- Criar a paginaçao para pesquisa
- Atualizar a versao do spring boot (no parent dentro do pom)
- Adicionar a dependencia do spring security
- Criar a pasta: Config, criar a classe: SecurityConfiguration com @Configuration e @EnableWebSecurity
- Criar o metodo para autenticaçao
- Adicionar dependencia do thymeleaf (biblioteca para criar paginas web em aplicaçoes springboot)
- mvn clean install -DskipTests
- Criar uma pagina dentro de resources chamada templates, e um arquivo chamado login.html
- Criar a pagina de login (pode utilizar o GPT)
na tag html adicionar xmlns:th="http://www.thymeleaf.org"
na tag form adicionar method="post" th:action="@{/login}"
adicionar o campo name="" para o username e para o password
- Dentro da pasta config criar uma classe chamada WebConfiguration com @Configuration e @EnableWebMvc
e implementar WebMvcConfigurer
- Sobrescrever o metodo addViewControllers com os dados da pagina de login que criamos
- Criar um novo controller chamado LoginViewController com @Controller
- Criar um metodo Get para /login
- No SecurityConfiguration alterar a pagina de login para o html que criamos
- mvn clean install -DskipTests
- Criar uma nova interface me config chamada UserDetailsService
- Injetar a dependencia de UserDetails
- Em SecurityConfiguration criar um metodo @Bean com saida UserDetailsService
- Criar os tipos de usuarios da aplciaçao
- Criar o metodo do passwordEncoder para codificar a senha para BCryptPasswodEncoder
- mvn clean install -DskipTests
- no SecurityConfiguration no metodo securityFilterChain, criar as autorizaçoes com base na role do usuario (requestMatcher)
- Criar a classe dominio usuarios
(UUID) id, login, senha, Lista de roles
- Verificar a versão do hibernate do projeto nas dependencias do maven
- Adicionar a dependencia do hypersistence de acordo com a versao do hibernate
- Adicionar as configuraçoes no atributo roles de Usuario com Type() e columnDefinition = "varchar[]"
- Criar DTO do usuario
- Criar classe de validaçao do usuario
- Criar o repository, service e controller da entidade Usuario
- 